/**
 * Noah French (njf5cu)
 * Lab 6
 * 9/20/17
 * Filename: hashTable.cpp
 * File description: implementation of the hash table. Includes nonmember functions harvested from primenumber.cpp
 */

#include "hashTable.h"
#include <math.h>

// Constructor (specific to this lab, because it must take in the dictionary size as a parameter)
hashTable::hashTable(unsigned int dictSize) {
  // Set table size to a prime number generated by the calculateTableSize method and put "?" in all the spaces.
  size = calculateTableSize(dictSize);
  table.resize(size, "?");
  // Populate the exponents vector with all powers of 37 that might be used by the hash function.
  for (int i = 0; i < 22; i++)
    exponents[i] = pow(37, i);
}

// insert via linear probing
void hashTable::insert(string word) {
  // Calculate the hash value for the input word.
  unsigned int hashValue = hash(word);
  
  // If there is already a word in the spot, check the next one!
  while (table[hashValue % size] != "?") {
    hashValue ++;
  }

  // Once an open spot is found, insert the word.
  table[hashValue % size] = word;
}

// Use the compute the hash value of the word!
unsigned int hashTable::hash(string word) {
  unsigned int hashValue = 0;
  // Hash function from the slides:
  for (int i = 0; i < word.length(); i++) {
    hashValue += word[i] * exponents[i];
  }
  
  return hashValue;  
}

// Calculate the table size to be the next prime after twice the dictionary size.
int hashTable::calculateTableSize(unsigned int dictSize) {
  return getNextPrime(dictSize * 3);
}

// Use linear probing to check whether the desired word is in the dictionary.
// Return true if the word is in the hash table; return false if it is not
bool hashTable::find(string word) {
  // Find the best-case hash value of the word to be found.
  unsigned int hashValue = hash(word);

  // As long as you haven't hit an empty space, keep incrementing by one.
  // If you find the word, return true.
  while (table[hashValue % size] != "?") {
    if (table[hashValue % size] == word)
      return true;
    hashValue ++;      
  }

  // else, if you hit an empty spot, return false. The word isn't in the hash table!
  return false;    
}

bool checkprime(unsigned int p) {
    if ( p <= 1 ) // 0 and 1 are not primes; the are both special cases
        return false;
    if ( p == 2 ) // 2 is prime
        return true;
    if ( p % 2 == 0 ) // even numbers other than 2 are not prime
        return false;
    for ( int i = 3; i*i <= p; i += 2 ) // only go up to the sqrt of p
        if ( p % i == 0 )
            return false;
    return true;
}

int getNextPrime (unsigned int n) {
    while ( !checkprime(++n) );
    return n; // all your primes are belong to us
}
